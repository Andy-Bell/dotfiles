set      noswapfile
syntax   on
filetype plugin indent on
set      nocp
filetype plugin on

"let g:ctrlp_prompt_mappings = {
"            \ 'AcceptSelection("e")': ['<c-t>'],
"            \ 'AcceptSelection("t")': ['<cr>', '<2-LeftMouse>'],
"            \ }

execute pathogen#infect()

set ruler
set relativenumber
set showmatch
set showcmd
set ignorecase
set colorcolumn=80
set tabstop=4
set shiftwidth=4
set expandtab
set nowrap
set hlsearch

let g:ausession=".vimsession"

set wildignore+=*venv/*,*.so,*.swp    " MacOSX/Linux

let g:ctrlp_custom_ignore = 'venv'


"mother fucking makefiles
autocmd FileType make setlocal noexpandtab

function! TwoSpace()
    setlocal ts=2
    setlocal sw=2
endfunction

function! OpenSpec()
    let repl = substitute(substitute(expand('%'), '\.rb', '', ''), "lib/", "spec/", "")
    let path = repl . '_spec.rb'
    exec('tabe ' . path)
endfunction

function! VsplitSpec()
    let repl = substitute(substitute(substitute(expand('%'), '\.rb', '', ''), "lib/", "spec/", ""), "app/", "spec/app/", "")
    let path = repl . '_spec.rb'
    exec('vsplit ' . path)
endfunction

function! PromoteToLet()
    :normal! dd
    " :exec '?^\s*it\>'
    :normal! P
    :.s/\(\w\+\) = \(.*\)$/let(:\1) { \2 }/
    :normal ==
    :normal! dd
endfunction

:command! PromoteToLet :call PromoteToLet()

au FileType ruby call TwoSpace()
au FileType coffee call TwoSpace()
au FileType vim call TwoSpace()
au BufRead,BufNewFile *.go set filetype=go

au FileType go set syntax=go

au FileType clojure inoremap ( ()<Left>
au BufNewFile,BufRead *.erb call TwoSpace()

set list
set listchars=tab:â†’\ ,trail:â˜ƒ
" None of these should be word dividers, so make them not be
set isk+=_,$,@,%,#,-

set background=dark
colorscheme solarized
hi ColorColumn ctermbg=darkgreen guibg=darkgreen

map <leader>jra      :!bundle exec rspec --no-color <CR>
map <leader>jca      :!bundle exec cucumber --no-color<CR>
map <leader>jrf      :!bundle exec rspec --no-color % <CR>
map <leader>jna      :!nosetests <CR>
map <leader>jnf      :!nosetests %<CR>
map <leader>jma      :!ruby test/test_helper.rb <CR>
map <leader>jta      :!./script/test_all --no-color <CR>
map <leader>jmf      :!ruby %<CR>
map <leader>rpf      :!python % <CR>
map <leader>rrf      :!ruby %<CR>
map <leader>rb       :!bash <CR>
map <leader>rv       :so ~/.vimrc <CR>
map <leader>rm       :!touch % && make <CR>
map <leader>rc       :!ctags -R<CR>
map <leader>eir      o<ESC>ogem "rspec-core", :github => "rspec/rspec-core"<CR>gem "rspec-expectations", :github => "rspec/rspec-expectations"<CR>gem "rspec-mocks", :github => "rspec/rspec-mocks"<CR>gem "rspec-support", :github => "rspec/rspec-support"<CR><ESC>
map <leader>li       gg/def.*init<CR>
map <leader>lcd      gg/class.*<CR>
map <leader>lrp      /^ *p <CR>
map <leader>arp      :Ack "^ *p " <CR>
map <leader>eal      :Align & <CR>
map <leader>eap      :Align => <CR>
map <leader>edc      mzO<ESC>j:s/,/,\r/g<CR>(%i<CR><ESC>%a<CR><ESC>(%=%:%s/ *$//g<CR>:noh<CR>'zkdd
map <leader>eae      :Align =<CR>
map <leader>ea{      :Align {<CR>
map <leader>erf      i.fetchlr{r(f]r)
map <leader>epl      :PromoteToLet<cr>
map <leader>etw      mp:%s/ *$//g<CR>:noh<CR>'p
map <leader>orf      :call OpenSpec()<CR>
map <leader>orv      :call VsplitSpec()<CR>
map <leader>onrv     :call VsplitSpec()<CR>irequire "spec_helper"<CR><ESC>
map <leader>ors      :tabe .rspec<CR>
map <leader>ogf      :tabe Gemfile<CR>
map <leader>ovr      :tabe ~/.vimrc<CR>/map.*leader<CR>:noh<CR>
map <leader>bi       :!bundle install<CR>
map <leader>ft       zfat
map <leader>uft      zR
map <leader><leader> gt
map <leader><space>  :noh<CR>
map <esc>            <esc>:w<CR>

nnoremap <leader>h <Esc>:call ToggleHardMode()<CR>


if has("gui_running")
    set guioptions=egmrt
endif

set incsearch
set vb


map  <up>    <nop>
map  <down>  <nop>
map  <left>  <nop>
map  <right> <nop>
imap <up>    <nop>
imap <down>  <nop>
imap <left>  <nop>
imap <right> <nop>

map <C-s> <esc>:w<CR>
imap <C-s> <esc>:w<CR>

command! Q  q  " Bind :Q  to :q
command! W  w  " Bind :W  to :w
command! Wq wq " Bind :Wq to :wq
command! WQ wq " Bind :WQ to :wq

" autocmd VimEnter,BufNewFile,BufReadPost * silent! call HardMode()
set backspace=indent,eol,start

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" RENAME CURRENT FILE
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! RenameFile()
    let old_name = expand('%')
    let new_name = input('New file name: ', expand('%'), 'file')
    if new_name != '' && new_name != old_name
        exec ':saveas ' . new_name
        exec ':silent !rm ' . old_name
        redraw!
    endif
endfunction
map <leader>n :call RenameFile()<cr>

set guifont=Source\ Code\ Pro:h12
